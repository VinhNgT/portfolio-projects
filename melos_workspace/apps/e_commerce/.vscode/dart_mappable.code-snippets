{
  // Place your driving_license workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "dart_mappable dataclass": {
    "prefix": "dtclass",
    "body": [
      "import 'package:dart_mappable/dart_mappable.dart';",
      "",
      "part '$TM_FILENAME_BASE.mapper.dart';",
      "",
      "@MappableClass()",
      "class ${TM_FILENAME_BASE/(^|_)(\\w)/${2:/upcase}/g} with ${TM_FILENAME_BASE/(^|_)(\\w)/${2:/upcase}/g}Mappable {",
      "  $1",
      "",
      "  const ${TM_FILENAME_BASE/(^|_)(\\w)/${2:/upcase}/g}({",
      "    $2",
      "  });",
      "",
      "  factory ${TM_FILENAME_BASE/(^|_)(\\w)/${2:/upcase}/g}.fromJson(Map<String, dynamic> json) =>",
      "      ${TM_FILENAME_BASE/(^|_)(\\w)/${2:/upcase}/g}Mapper.fromJson(json);",
      "}"
    ],
    "description": ""
  }
}
