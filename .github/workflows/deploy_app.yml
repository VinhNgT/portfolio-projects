name: Build & deploy app
run-name: Build & deploy ${{ github.ref_name }}

on:
  push:
    tags:
      - '*-v*.*.*'

jobs:
  print-github-context:
    runs-on: ubuntu-latest
    steps:
      - env:
          GITHUB_VAR: ${{ toJson(github) }}
        run: echo "$GITHUB_VAR"

  get-variables:
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.get_tag_info.outputs.PACKAGE_NAME }}
      package_version: ${{ steps.get_package_info.outputs.PACKAGE_VERSION }}
      package_location: ${{ steps.get_package_info.outputs.PACKAGE_LOCATION }}
      package_enable_cd: ${{ steps.read_cd_config.outputs.PACKAGE_ENABLE_CD }}
      deployments_json_list: ${{ steps.read_cd_config.outputs.DEPLOYMENTS_JSON_LIST }}
      # cd_config_yaml: ${{ steps.read_cd_config.outputs.CD_CONFIG_YAML }}

    steps:
      - name: Get package name
        id: get_tag_info
        env:
          TAG: ${{ github.ref_name }}
        run: |
          PACKAGE_NAME=$(echo $TAG | awk -F '-v' '{print $1}')
          # VERSION=$(echo $TAG | awk -F '-v' '{print $2}')

          if [ -z "$PACKAGE_NAME" ]; then
            echo "::error::No package name found"
            exit 1
          fi

          # if [ -z "$VERSION" ]; then
          #   echo "::error::No version found"
          #   exit 1
          # fi

          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          # echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: kuhnroyal/flutter-fvm-config-action/setup@v3
        with:
          path: melos_workspace/.fvmrc

      - name: Create symlink .fvm/flutter_sdk
        working-directory: melos_workspace
        run: |
          mkdir -p .fvm
          ln -s $FLUTTER_ROOT .fvm/flutter_sdk

      - name: Setup melos
        working-directory: melos_workspace
        run: |
          dart pub global activate melos
          melos bootstrap --skip-linking

      - name: Get package info
        id: get_package_info
        working-directory: melos_workspace
        env:
          PACKAGE_NAME: ${{ steps.get_tag_info.outputs.PACKAGE_NAME }}
        run: |
          PACKAGE_INFO_JSON=$(melos list -r --json --scope="$PACKAGE_NAME")

          # Example content of PACKAGE_INFO_JSON:
          #
          # [
          #   {
          #     "name": "driving_license",
          #     "version": "1.3.0-dev.0",
          #     "private": true,
          #     "location": "apps/driving_license/pkg_workspace",
          #     "type": 3
          #   }
          # ]
          #

          PACKAGE_VERSION=$(echo $PACKAGE_INFO_JSON | jq -r '.[0].version')

          # Remove the last part of the path to get the package location.
          PACKAGE_LOCATION=$(echo $PACKAGE_INFO_JSON | jq -r '.[0].location' | sed 's:/[^/]*$::')

          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "PACKAGE_LOCATION=$PACKAGE_LOCATION" >> $GITHUB_OUTPUT

      - name: Read package CD config
        id: read_cd_config
        working-directory: melos_workspace/${{ steps.get_package_info.outputs.PACKAGE_LOCATION }}
        run: |
          CD_CONFIG_YAML=$(cat cicd/cd_config.yaml)

          PACKAGE_ENABLE_CD=$(echo "$CD_CONFIG_YAML" | yq '.enable')
          DEPLOYMENTS_JSON_LIST=$(echo "$CD_CONFIG_YAML" | yq '.deployments | keys' -o json | jq -c .)

          echo "PACKAGE_ENABLE_CD=$PACKAGE_ENABLE_CD" >> $GITHUB_OUTPUT
          echo "DEPLOYMENTS_JSON_LIST=$DEPLOYMENTS_JSON_LIST" >> $GITHUB_OUTPUT

          # Multilines handling.
          # echo "CD_CONFIG_YAML<<EOF" >> $GITHUB_OUTPUT
          # echo "$CD_CONFIG_YAML" >> $GITHUB_OUTPUT
          # echo "EOF" >> $GITHUB_OUTPUT

  deploy_android:
    needs: get-variables
    if: ${{
      needs.get-variables.outputs.package_enable_cd == 'true' &&
      contains(fromJSON(needs.get-variables.outputs.deployments_json_list), 'android')
      }}
    uses: ./.github/workflows/deploy_android.yml
    secrets: inherit
    with:
      # config-yaml: ${{ needs.get-variables.outputs.cd_config_yaml }}
      package-name: ${{ needs.get-variables.outputs.package_name }}
      version: ${{ needs.get-variables.outputs.package_version }}
      package-location: ${{ needs.get-variables.outputs.package_location }}

  publish-github:
    runs-on: ubuntu-latest
    needs:
      - get-variables
      - deploy_android
    env:
      PACKAGE_LOCATION: ${{ needs.get-variables.outputs.package_location }}
      VERSION: ${{ needs.get-variables.outputs.package_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Get publish config
        id: get_publish_config
        working-directory: melos_workspace/${{ env.PACKAGE_LOCATION }}
        run: |
          CD_CONFIG_YAML=$(cat cicd/cd_config.yaml)

          IS_DRAFT=$(echo "$CD_CONFIG_YAML" | yq e '.deployments.github.draft')
          FILE_PATHS=$(echo "$CD_CONFIG_YAML" | yq e '.deployments.github.file_paths[]')

          echo "IS_DRAFT=$IS_DRAFT" >> $GITHUB_OUTPUT

          echo "FILE_PATHS<<EOF" >> $GITHUB_OUTPUT
          echo "$FILE_PATHS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 'android-build-artifacts' is the artifact name uploaded by deploy_android.
      - name: Download android build artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: android-build-artifacts
          path: melos_workspace/${{ env.PACKAGE_LOCATION }}/build_result/release/

      - name: Add package dirs to file paths
        id: add_package_dirs
        env:
          INPUT_FILE_PATHS: ${{ steps.get_publish_config.outputs.FILE_PATHS }}
        run: |
          PACKAGE_FILE_PATHS=$(echo "${{ env.INPUT_FILE_PATHS }}" | while read -r line; do
              echo "melos_workspace/$PACKAGE_LOCATION/$line"
          done)

          echo "PACKAGE_FILE_PATHS<<EOF" >> $GITHUB_OUTPUT
          echo "$PACKAGE_FILE_PATHS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create github release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: ${{ steps.add_package_dirs.outputs.PACKAGE_FILE_PATHS }}
          draft: ${{ steps.get_publish_config.outputs.IS_DRAFT }}
          prerelease: ${{ contains(env.VERSION, '-dev.') }}
          make_latest: ${{ !contains(env.VERSION, '-dev.') }}

  notify-telegram:
    runs-on: ubuntu-latest
    needs:
      - get-variables
      - deploy_android
      - publish-github
    if: success() || failure()

    steps:
      - name: Get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          timezone: 'Asia/Ho_Chi_Minh'

      - name: Check workflow status
        id: check_workflow_status
        env:
          DEPLOY_ANDROID_STATUS: ${{ needs.deploy_android.result }}
          PUBLISH_GITHUB_STATUS: ${{ needs.publish-github.result }}
        run: |
          if [ "$DEPLOY_ANDROID_STATUS" == "success" ] &&
              [ "$PUBLISH_GITHUB_STATUS" == "success" ]; then
              echo "STATUS=success" >> $GITHUB_OUTPUT
          else
              echo "STATUS=failure" >> $GITHUB_OUTPUT
          fi

      - name: Notify Telegram job status
        uses: appleboy/telegram-action@master
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PACKAGE_NAME: ${{ needs.get-variables.outputs.package_name }}
          PACKAGE_VERSION: ${{ needs.get-variables.outputs.package_version }}
          PACKAGE_LOCATION: ${{ needs.get-variables.outputs.package_location }}
          CURRENT_TIME: ${{ steps.current-time.outputs.readableTime }}
          WORKFLOW_STATUS: ${{ steps.check_workflow_status.outputs.STATUS }}

        with:
          to: ${{ vars.TELEGRAM_CICD_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: html
          disable_web_page_preview: true
          message: |
            <b>ðŸš€ Package Deployment Report</b>

            Actor: ${{ env.GITHUB_ACTOR }}
            Commit: <a href="${{ github.event.head_commit.url }}">${{ github.sha }}</a>

            Package name: ${{ env.PACKAGE_NAME }}
            Version: ${{ env.PACKAGE_VERSION }}
            Melos location: ${{ env.PACKAGE_LOCATION }}

            Workflow status:
            <pre>${{ env.WORKFLOW_STATUS }}</pre>

            Details:
            <pre>Ref: ${{ github.ref }}

            Android deployment job status:
            ${{ needs.deploy_android.result }}

            GitHub release job status:
            ${{ needs.publish-github.result }}</pre>

            ${{ env.CURRENT_TIME }}

  # test-telegram:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Get current time
  #       uses: josStorer/get-current-time@v2
  #       id: current-time
  #       with:
  #         timezone: 'Asia/Ho_Chi_Minh'

  #     - name: Notify Telegram job status
  #       uses: appleboy/telegram-action@v0.1.1
  #       env:
  #         GITHUB_ACTOR: ${{ github.actor }}
  #         PACKAGE_NAME: driving_license
  #         PACKAGE_VERSION: 1.3.1
  #         PACKAGE_LOCATION: apps/driving_license
  #         CURRENT_TIME: ${{ steps.current-time.outputs.readableTime }}
  #         WORKFLOW_STATUS: 'success'

  #       with:
  #         to: ${{ vars.TELEGRAM_CICD_CHANNEL_ID }}
  #         token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  #         format: html
  #         disable_web_page_preview: true
  #         message: |
  #           <b>ðŸš€ Package Deployment Report</b>

  #           Actor: ${{ env.GITHUB_ACTOR }}
  #           Commit: <a href="${{ github.event.head_commit.url }}">${{ github.sha }}</a>

  #           Package name: ${{ env.PACKAGE_NAME }}
  #           Version: ${{ env.PACKAGE_VERSION }}
  #           Melos location: ${{ env.PACKAGE_LOCATION }}

  #           Workflow status:
  #           <pre>${{ env.WORKFLOW_STATUS }}</pre>

  #           Details:
  #           <pre>Ref: ${{ github.ref }}

  #           Android deployment job status:
  #           success

  #           GitHub release job status:
  #           success</pre>

  #           ${{ env.CURRENT_TIME }}
